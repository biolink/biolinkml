BASE <https://w3id.org/biolink/biolinkml/meta/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX pav: <http://purl.org/pav/>
PREFIX oslc: <http://open-services.net/ns/core#>
PREFIX bibo: <http://purl.org/ontology/bibo/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>
PREFIX metatype: <https://w3id.org/biolink/biolinkml/meta/types/>


metatype:String xsd:string

metatype:Integer xsd:integer

metatype:Boolean xsd:boolean

metatype:Float xsd:float

metatype:Double xsd:double

metatype:Time xsd:dateTime

metatype:Date xsd:date

metatype:Datetime xsd:dateTime

metatype:Uriorcurie IRI

metatype:Uri IRI

metatype:Ncname xsd:string

metatype:Objectidentifier IRI

metatype:Nodeidentifier NONLITERAL

<AltDescription> CLOSED {
    (  $<AltDescription_tes> (  <source> @metatype:Ncname ;
          <description> @metatype:String
       ) ;
       rdf:type [ <AltDescription> ] ?
    )
}

<Annotatable> {
    (  $<Annotatable_tes> <annotations> @<Annotation> * ;
       rdf:type [ <Annotatable> ] ?
    )
}

<Annotation> CLOSED {
    (  $<Annotation_tes> (  &<Extension_tes> ;
          rdf:type [ <Extension> ] ? ;
          <annotations> @<Annotation> * ;
          <value> @metatype:Boolean
       ) ;
       rdf:type [ <Annotation> ] ?
    )
}

<ClassDefinition> CLOSED {
    (  $<ClassDefinition_tes> (  &<Definition_tes> ;
          rdf:type [ <Definition> ] ? ;
          <slots> @<SlotDefinition> * ;
          <slot_usage> @<SlotDefinition> * ;
          <attributes> @<SlotDefinition> * ;
          <class_uri> @metatype:Uriorcurie ? ;
          rdfs:subClassOf @metatype:Uriorcurie ? ;
          <union_of> @<ClassDefinition> * ;
          <defining_slots> @<SlotDefinition> * ;
          <tree_root> @metatype:Boolean ? ;
          <is_a> @<ClassDefinition> ? ;
          <mixins> @<ClassDefinition> * ;
          <apply_to> @<ClassDefinition> *
       ) ;
       rdf:type [ <ClassDefinition> ]
    )
}

<Definition>  (
    @<ClassDefinition> OR @<SlotDefinition>
)

<Definition_struct> {
    (  $<Definition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          <abstract> @metatype:Boolean ? ;
          <mixin> @metatype:Boolean ? ;
          <mixins> @<Definition> * ;
          <apply_to> @<Definition> * ;
          <values_from> @metatype:Uriorcurie * ;
          pav:createdBy @metatype:Uriorcurie ? ;
          pav:createdOn @metatype:Datetime ? ;
          pav:lastUpdatedOn @metatype:Datetime ? ;
          oslc:modifiedBy @metatype:Uriorcurie ? ;
          bibo:status @metatype:Uriorcurie ?
       ) ;
       rdf:type [ <Definition> ]
    )
}

<Element>  (
    @<Definition> OR @<SchemaDefinition> OR @<SubsetDefinition> OR @<TypeDefinition>
)

<Element_struct> {
    (  $<Element_tes> (  &<Extensible_tes> ;
          rdf:type [ <Extensible> ] ? ;
          &<Annotatable_tes> ;
          rdf:type [ <Annotatable> ] ? ;
          <id_prefixes> @metatype:Ncname * ;
          <definition_uri> @metatype:Uriorcurie ? ;
          skos:altLabel @metatype:String * ;
          <local_names> @<LocalName> * ;
          skos:mappingRelation @metatype:Uriorcurie * ;
          skos:definition @metatype:String ? ;
          <alt_descriptions> @<AltDescription> * ;
          <deprecated> @metatype:String ? ;
          <todos> @metatype:String * ;
          skos:editorialNote @metatype:String * ;
          skos:note @metatype:String * ;
          <examples> @<Example> * ;
          oboInOwl:inSubset @<SubsetDefinition> * ;
          skos:inScheme @metatype:Uri ? ;
          <imported_from> @metatype:String ? ;
          rdfs:seeAlso @metatype:Uriorcurie * ;
          skos:exactMatch @metatype:Uriorcurie * ;
          skos:closeMatch @metatype:Uriorcurie * ;
          skos:relatedMatch @metatype:Uriorcurie * ;
          skos:narrowMatch @metatype:Uriorcurie * ;
          skos:broadMatch @metatype:Uriorcurie * ;
          <deprecated_element_has_exact_replacement> @metatype:Uriorcurie ? ;
          <deprecated_element_has_possible_replacement> @metatype:Uriorcurie ? ;
          <extensions> @<Extension> * ;
          <annotations> @<Annotation> *
       ) ;
       rdf:type [ <Element> ]
    )
}

<Example> CLOSED {
    (  $<Example_tes> (  skos:example @metatype:String ? ;
          <description> @metatype:String ?
       ) ;
       rdf:type [ <Example> ] ?
    )
}

<Extensible> {
    (  $<Extensible_tes> <extensions> @<Extension> * ;
       rdf:type [ <Extensible> ] ?
    )
}

<Extension>  (
    CLOSED {
       (  $<Extension_tes> (  <tag> @metatype:Uriorcurie ;
             <value> @metatype:String ;
             <extensions> @<Extension> *
          ) ;
          rdf:type [ <Extension> ] ?
       )
    } OR @<Annotation>
)

<LocalName> CLOSED {
    (  $<LocalName_tes> (  <local_name_source> @metatype:Ncname ;
          skos:altLabel @metatype:String
       ) ;
       rdf:type [ <LocalName> ] ?
    )
}

<Prefix> CLOSED {
    (  $<Prefix_tes> (  <prefix_prefix> @metatype:Ncname ;
          <prefix_reference> @metatype:Uri
       ) ;
       rdf:type [ <Prefix> ] ?
    )
}

<SchemaDefinition> CLOSED {
    (  $<SchemaDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          <id> @metatype:Uri ;
          dcterms:title @metatype:String ? ;
          pav:version @metatype:String ? ;
          <imports> @metatype:Uriorcurie * ;
          dcterms:license @metatype:String ? ;
          <prefixes> @<Prefix> * ;
          <emit_prefixes> @metatype:Ncname * ;
          <default_curi_maps> @metatype:String * ;
          <default_prefix> @metatype:String ? ;
          <default_range> @<TypeDefinition> ? ;
          <subsets> @<SubsetDefinition> * ;
          <types> @<TypeDefinition> * ;
          <slots> @<SlotDefinition> * ;
          <classes> @<ClassDefinition> * ;
          <metamodel_version> @metatype:String ? ;
          <source_file> @metatype:String ? ;
          <source_file_date> @metatype:Datetime ? ;
          <source_file_size> @metatype:Integer ? ;
          <generation_date> @metatype:Datetime ?
       ) ;
       rdf:type [ <SchemaDefinition> ]
    )
}

<SlotDefinition> CLOSED {
    (  $<SlotDefinition_tes> (  &<Definition_tes> ;
          rdf:type [ <Definition> ] ? ;
          skos:altLabel @metatype:String ? ;
          <domain> @<ClassDefinition> ? ;
          <range> @<Element> ? ;
          <slot_uri> @metatype:Uriorcurie ? ;
          <multivalued> @metatype:Boolean ? ;
          <inherited> @metatype:Boolean ? ;
          <readonly> @metatype:String ? ;
          <ifabsent> @metatype:String ? ;
          <required> @metatype:Boolean ? ;
          <inlined> @metatype:Boolean ? ;
          <key> @metatype:Boolean ? ;
          <identifier> @metatype:Boolean ? ;
          <alias> @metatype:String ? ;
          <owner> @<Definition> ? ;
          <domain_of> @<ClassDefinition> * ;
          rdfs:subPropertyOf @<SlotDefinition> ? ;
          <symmetric> @metatype:Boolean ? ;
          owl:inverseOf @<SlotDefinition> ? ;
          <is_class_field> @metatype:Boolean ? ;
          <role> @metatype:String ? ;
          <is_usage_slot> @metatype:Boolean ? ;
          <usage_slot_name> @metatype:String ? ;
          <minimum_value> @metatype:Integer ? ;
          <maximum_value> @metatype:Integer ? ;
          <pattern> @metatype:String ? ;
          <string_serialization> @metatype:String ? ;
          <is_a> @<SlotDefinition> ? ;
          <mixins> @<SlotDefinition> * ;
          <apply_to> @<SlotDefinition> *
       ) ;
       rdf:type [ <SlotDefinition> ]
    )
}

<SubsetDefinition> CLOSED {
    (  $<SubsetDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ?
       ) ;
       rdf:type [ <SubsetDefinition> ]
    )
}

<TypeDefinition> CLOSED {
    (  $<TypeDefinition_tes> (  &<Element_tes> ;
          rdf:type [ <Element> ] ? ;
          <typeof> @<TypeDefinition> ? ;
          <base> @metatype:String ? ;
          <uri> @metatype:Uriorcurie ? ;
          <repr> @metatype:String ?
       ) ;
       rdf:type [ <TypeDefinition> ]
    )
}



