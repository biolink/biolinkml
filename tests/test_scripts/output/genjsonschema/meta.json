{
   "$id": "https://w3id.org/biolink/biolinkml/meta",
   "$schema": "http://json-schema.org/draft-04/schema#",
   "definitions": {
      "abstract": {
         "description": "an abstract class is a high level class or slot that is typically used to group common slots together and cannot be directly instantiated.",
         "type": "string"
      },
      "alias": {
         "description": "the name used for a slot in the context of its owning class.  If present, this is used instead of the actual slot name.",
         "type": "string"
      },
      "aliases": {
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "alt_descriptions": {
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "apply_to": {
         "description": "Used to extend class or slot definitions. For example, if we have a core schema where a gene has two slots for identifier and symbol, and we have a specialized schema for my_organism where we wish to add a slot systematic_name, we can avoid subclassing by defining a class gene_my_organism, adding the slot to this class, and then adding an apply_to pointing to the gene class. The new slot will be 'injected into' the gene class.",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "base": {
         "description": "python base type that implements this type definition",
         "type": "string"
      },
      "class_uri": {
         "description": "URI of the class in an RDF environment",
         "type": "string"
      },
      "classes": {
         "description": "class definitions",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "comments": {
         "description": "notes and comments about an element intended for external consumption",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "default_curi_maps": {
         "description": "ordered list of prefixcommon biocontexts to be fetched to resolve id prefixes and inline prefix variables",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "default_prefix": {
         "description": "default and base prefix -- used for ':' identifiers, @base and @vocab",
         "type": "string"
      },
      "default_range": {
         "description": "default slot range to be used if range element is omitted from a slot definition",
         "type": "string"
      },
      "defining_slots": {
         "description": "The combination of is a plus defining slots form a genus-differentia definition, or the set of necessary and sufficient conditions that can be transformed into an OWL equivalence axiom",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "deprecated": {
         "description": "Description of why and when this element will no longer be used",
         "type": "string"
      },
      "description": {
         "description": "a description of the element's purpose and use",
         "type": "string"
      },
      "domain": {
         "description": "defines the type of the subject of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts that X is an instance of C1\n",
         "type": "string"
      },
      "emit_prefixes": {
         "description": "a list of Curie prefixes that are used in the representation of instances of the model.  All prefixes in this list are added to the prefix sections of the target models.",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "examples": {
         "description": "example usages of an element",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "from_schema": {
         "description": "id of the schema that defined the element",
         "type": "string"
      },
      "generation_date": {
         "description": "date and time that the schema was loaded/generated",
         "type": "string"
      },
      "id": {
         "description": "The official schema URI",
         "type": "string"
      },
      "id_prefixes": {
         "description": "the identifier of this class or slot must begin with one of the URIs referenced by this prefix",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "identifier": {
         "description": "true means that this slot is the subject of a set of assertions.  Identifiers do not appear as predicates in the model",
         "type": "string"
      },
      "ifabsent": {
         "description": "function that provides a default value for the slot.  Possible values for this slot are defined in biolink.utils.ifabsent_functions.default_library:\n  * [Tt]rue -- boolean True\n  * [Ff]alse -- boolean False\n  * int(value) -- integer value\n  * str(value) -- string value\n  * default_range -- schema default range\n  * bnode -- blank node identifier\n  * slot_uri -- URI for the slot\n  * class_curie -- CURIE for the containing class\n  * class_uri -- URI for the containing class",
         "type": "string"
      },
      "imported_from": {
         "description": "the imports entry that this element was derived from.  Empty means primary source",
         "type": "string"
      },
      "imports": {
         "description": "other schemas that are included in this schema",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "in_subset": {
         "description": "used to indicate membership of a term in a defined subset of biolink terms used for a particular domain or application (e.g. the translator_minimal subset holding the minimal set of predicates used in a translator knowledge graph)",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "inherited": {
         "description": "true means that the *value* of a slot is inherited by subclasses",
         "type": "string"
      },
      "inlined": {
         "description": "an inlined definition a list of actual values rather than references.  Only applies to slots whose range is a class.",
         "type": "string"
      },
      "inverse": {
         "description": "indicates that any instance of d s r implies that there is also an instance of r s' d",
         "type": "string"
      },
      "is_a": {
         "description": "specifies single-inheritance between classes or slots. While multiple inheritance is not allowed, mixins can be provided effectively providing the same thing. The semantics are the same when translated to formalisms that allow MI (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python classes) then is a is used. When translating a framework without polymorphism (e.g. json-schema, solr document schema) then is a and mixins are recursively unfolded",
         "type": "string"
      },
      "is_class_field": {
         "description": "indicates that any instance, i,  the domain of this slot will include an assert of i s range",
         "type": "string"
      },
      "is_usage_slot": {
         "description": "True means that this slot was defined in a slot_usage situation",
         "type": "string"
      },
      "key": {
         "description": "true means that the slot uniquely identifies the element within the context of its container.  Key slots are NOT identifiers - they do not serve as subjects",
         "type": "string"
      },
      "license": {
         "description": "license for the schema",
         "type": "string"
      },
      "local_name_source": {
         "description": "the ncname of the source of the name",
         "type": "string"
      },
      "local_name_value": {
         "description": "a name assigned to an element in a given ontology",
         "type": "string"
      },
      "local_names": {
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "mappings": {
         "description": "A list of terms from different schemas or terminology systems that have comparable meaning. These may include terms that are precisely equivalent, broader or narrower in meaning, or otherwise semantically related but not equivalent from a strict ontological perspective.",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "metamodel_version": {
         "description": "Version of the metamodel used to load the schema",
         "type": "string"
      },
      "mixin": {
         "description": "this slot or class can only be used as a mixin -- equivalent to abstract",
         "type": "string"
      },
      "mixins": {
         "description": "List of definitions to be mixed in. Targets may be any definition of the same type",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "multivalued": {
         "description": "true means that slot can have more than one value",
         "type": "string"
      },
      "name": {
         "description": "the unique name of the element within the context of the schema.  Name is combined with the default prefix to form the globally unique subject of the target class.",
         "type": "string"
      },
      "notes": {
         "description": "editorial notes about an element intended for internal consumption",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "owner": {
         "description": "the \"owner\" of the slot. It is the class if it appears in the slots list, otherwise the declaring slot",
         "type": "string"
      },
      "prefix_prefix": {
         "description": "the nsname (sans ':' for a given prefix)",
         "type": "string"
      },
      "prefix_reference": {
         "description": "A URI associated with a given prefix",
         "type": "string"
      },
      "prefixes": {
         "description": "prefix / URI definitions to be added to the context beyond those fetched from prefixcommons in id prefixes",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "range": {
         "description": "defines the type of the object of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts Y is an instance of C2\n",
         "type": "string"
      },
      "readonly": {
         "description": "If present, slot is read only.  Text explains why",
         "type": "string"
      },
      "repr": {
         "description": "the name of the python object that implements this type definition",
         "type": "string"
      },
      "required": {
         "description": "true means that the slot must be present in the loaded definition",
         "type": "string"
      },
      "role": {
         "description": "the role played by the slot range",
         "type": "string"
      },
      "see_also": {
         "description": "a reference",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "singular_name": {
         "description": "a name that is used in the singular form",
         "type": "string"
      },
      "slot_uri": {
         "description": "predicate of this slot for semantic web application",
         "type": "string"
      },
      "slot_usage": {
         "description": "the redefinition of a slot in the context of the containing class definition.",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "slots": {
         "description": "list of slot names that are applicable to a class",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "source_file": {
         "description": "name, uri or description of the source of the schema",
         "type": "string"
      },
      "source_file_date": {
         "description": "modification date of the source of the schema",
         "type": "string"
      },
      "source_file_size": {
         "description": "size in bytes of the source of the schema",
         "type": "string"
      },
      "subclass_of": {
         "description": "rdfs:subClassOf to be emitted in OWL generation",
         "type": "string"
      },
      "subproperty_of": {
         "description": "Ontology property which this slot is a subproperty of",
         "type": "string"
      },
      "subsets": {
         "description": "list of subsets referenced in this model",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "symmetric": {
         "description": "True means that any instance of  d s r implies that there is also an instance of r s d",
         "type": "string"
      },
      "title": {
         "description": "the official title of the schema",
         "type": "string"
      },
      "todos": {
         "description": "Outstanding issue that needs resolution",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "typeof": {
         "description": "Names a parent type",
         "type": "string"
      },
      "types": {
         "description": "data types used in the model",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "union_of": {
         "description": "indicates that the domain class consists exactly of the members of the classes in the range",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "value": {
         "description": "example value",
         "type": "string"
      },
      "values_from": {
         "description": "the identifier of a \"value set\" -- a set of identifiers that form the possible values for the range of a slot",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "version": {
         "description": "particular version of schema",
         "type": "string"
      }
   },
   "properties": {
      "AltDescription": {
         "description": "an attributed description",
         "properties": {
            "description": {
               "description": "text of an attributed description",
               "required": true,
               "type": "string"
            },
            "source": {
               "description": "the source of an attributed description",
               "required": true,
               "type": "string"
            }
         },
         "title": "AltDescription",
         "type": "object"
      },
      "ClassDefinition": {
         "description": "the definition of a class or interface",
         "properties": {
            "apply_to": {
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "class_uri": {
               "description": "URI of the class in an RDF environment",
               "type": "string"
            },
            "defining_slots": {
               "description": "The combination of is a plus defining slots form a genus-differentia definition, or the set of necessary and sufficient conditions that can be transformed into an OWL equivalence axiom",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "is_a": {
               "type": "string"
            },
            "mixins": {
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "slot_usage": {
               "description": "the redefinition of a slot in the context of the containing class definition.",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "slots": {
               "description": "list of slot names that are applicable to a class",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "subclass_of": {
               "description": "rdfs:subClassOf to be emitted in OWL generation",
               "type": "string"
            },
            "union_of": {
               "description": "indicates that the domain class consists exactly of the members of the classes in the range",
               "items": {
                  "type": "string"
               },
               "type": "array"
            }
         },
         "title": "ClassDefinition",
         "type": "object"
      },
      "Example": {
         "description": "usage example and description",
         "properties": {
            "description": {
               "description": "description of what the value is doing",
               "type": "string"
            },
            "value": {
               "description": "example value",
               "type": "string"
            }
         },
         "title": "Example",
         "type": "object"
      },
      "LocalName": {
         "description": "an attributed label",
         "properties": {
            "local_name_source": {
               "description": "the ncname of the source of the name",
               "required": true,
               "type": "string"
            },
            "local_name_value": {
               "description": "a name assigned to an element in a given ontology",
               "required": true,
               "type": "string"
            }
         },
         "title": "LocalName",
         "type": "object"
      },
      "Prefix": {
         "description": "prefix URI tuple",
         "properties": {
            "prefix_prefix": {
               "description": "the nsname (sans ':' for a given prefix)",
               "required": true,
               "type": "string"
            },
            "prefix_reference": {
               "description": "A URI associated with a given prefix",
               "required": true,
               "type": "string"
            }
         },
         "title": "Prefix",
         "type": "object"
      },
      "SchemaDefinition": {
         "description": "a collection of subset, type, slot and class definitions",
         "properties": {
            "classes": {
               "description": "class definitions",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "default_curi_maps": {
               "description": "ordered list of prefixcommon biocontexts to be fetched to resolve id prefixes and inline prefix variables",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "default_prefix": {
               "description": "default and base prefix -- used for ':' identifiers, @base and @vocab",
               "type": "string"
            },
            "default_range": {
               "description": "default slot range to be used if range element is omitted from a slot definition",
               "type": "string"
            },
            "emit_prefixes": {
               "description": "a list of Curie prefixes that are used in the representation of instances of the model.  All prefixes in this list are added to the prefix sections of the target models.",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "generation_date": {
               "description": "date and time that the schema was loaded/generated",
               "type": "string"
            },
            "id": {
               "description": "The official schema URI",
               "required": true,
               "type": "string"
            },
            "imports": {
               "description": "other schemas that are included in this schema",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "license": {
               "description": "license for the schema",
               "type": "string"
            },
            "metamodel_version": {
               "description": "Version of the metamodel used to load the schema",
               "type": "string"
            },
            "prefixes": {
               "description": "prefix / URI definitions to be added to the context beyond those fetched from prefixcommons in id prefixes",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "slots": {
               "description": "slot definitions",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "source_file": {
               "description": "name, uri or description of the source of the schema",
               "type": "string"
            },
            "source_file_date": {
               "description": "modification date of the source of the schema",
               "type": "string"
            },
            "source_file_size": {
               "description": "size in bytes of the source of the schema",
               "type": "string"
            },
            "subsets": {
               "description": "list of subsets referenced in this model",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "title": {
               "description": "the official title of the schema",
               "type": "string"
            },
            "types": {
               "description": "data types used in the model",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "version": {
               "description": "particular version of schema",
               "type": "string"
            }
         },
         "title": "SchemaDefinition",
         "type": "object"
      },
      "SlotDefinition": {
         "description": "the definition of a property or a slot",
         "properties": {
            "alias": {
               "description": "the name used for a slot in the context of its owning class.  If present, this is used instead of the actual slot name.",
               "type": "string"
            },
            "apply_to": {
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "domain": {
               "description": "defines the type of the subject of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts that X is an instance of C1\n",
               "type": "string"
            },
            "identifier": {
               "description": "true means that this slot is the subject of a set of assertions.  Identifiers do not appear as predicates in the model",
               "type": "string"
            },
            "ifabsent": {
               "description": "function that provides a default value for the slot.  Possible values for this slot are defined in biolink.utils.ifabsent_functions.default_library:\n  * [Tt]rue -- boolean True\n  * [Ff]alse -- boolean False\n  * int(value) -- integer value\n  * str(value) -- string value\n  * default_range -- schema default range\n  * bnode -- blank node identifier\n  * slot_uri -- URI for the slot\n  * class_curie -- CURIE for the containing class\n  * class_uri -- URI for the containing class",
               "type": "string"
            },
            "inherited": {
               "description": "true means that the *value* of a slot is inherited by subclasses",
               "type": "string"
            },
            "inlined": {
               "description": "an inlined definition a list of actual values rather than references.  Only applies to slots whose range is a class.",
               "type": "string"
            },
            "inverse": {
               "description": "indicates that any instance of d s r implies that there is also an instance of r s' d",
               "type": "string"
            },
            "is_a": {
               "type": "string"
            },
            "is_class_field": {
               "description": "indicates that any instance, i,  the domain of this slot will include an assert of i s range",
               "type": "string"
            },
            "is_usage_slot": {
               "description": "True means that this slot was defined in a slot_usage situation",
               "type": "string"
            },
            "key": {
               "description": "true means that the slot uniquely identifies the element within the context of its container.  Key slots are NOT identifiers - they do not serve as subjects",
               "type": "string"
            },
            "mixins": {
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "multivalued": {
               "description": "true means that slot can have more than one value",
               "type": "string"
            },
            "owner": {
               "description": "the \"owner\" of the slot. It is the class if it appears in the slots list, otherwise the declaring slot",
               "type": "string"
            },
            "range": {
               "description": "defines the type of the object of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts Y is an instance of C2\n",
               "type": "string"
            },
            "readonly": {
               "description": "If present, slot is read only.  Text explains why",
               "type": "string"
            },
            "required": {
               "description": "true means that the slot must be present in the loaded definition",
               "type": "string"
            },
            "role": {
               "description": "the role played by the slot range",
               "type": "string"
            },
            "singular_name": {
               "description": "a name that is used in the singular form",
               "type": "string"
            },
            "slot_uri": {
               "description": "predicate of this slot for semantic web application",
               "type": "string"
            },
            "subproperty_of": {
               "description": "Ontology property which this slot is a subproperty of",
               "type": "string"
            },
            "symmetric": {
               "description": "True means that any instance of  d s r implies that there is also an instance of r s d",
               "type": "string"
            }
         },
         "title": "SlotDefinition",
         "type": "object"
      },
      "SubsetDefinition": {
         "description": "the name and description of a subset",
         "properties": {},
         "title": "SubsetDefinition",
         "type": "object"
      },
      "TypeDefinition": {
         "description": "A data type definition.",
         "properties": {
            "base": {
               "description": "python base type that implements this type definition",
               "type": "string"
            },
            "repr": {
               "description": "the name of the python object that implements this type definition",
               "type": "string"
            },
            "typeof": {
               "description": "Names a parent type",
               "type": "string"
            },
            "uri": {
               "description": "The uri that defines the possible values for the type definition",
               "type": "string"
            }
         },
         "title": "TypeDefinition",
         "type": "object"
      }
   },
   "title": "metamodel",
   "type": "object"
}

