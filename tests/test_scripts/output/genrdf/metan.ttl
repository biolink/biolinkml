@prefix IAO: <http://purl.obolibrary.org/obo/IAO_> .
@prefix OIO: <http://www.geneontology.org/formats/oboInOwl#> .
@prefix abstract: <https://w3id.org/biolink/biolinkml/meta/abstract> .
@prefix alt_descriptions: <https://w3id.org/biolink/biolinkml/meta/alt_descriptions> .
@prefix apply_to: <https://w3id.org/biolink/biolinkml/meta/apply_to> .
@prefix biolinkml: <https://w3id.org/biolink/biolinkml/> .
@prefix class_uri: <https://w3id.org/biolink/biolinkml/meta/class_uri> .
@prefix classes: <https://w3id.org/biolink/biolinkml/meta/classes> .
@prefix close_mappings: <http://www.w3.org/2004/02/skos/core#closeMatch> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default_range: <https://w3id.org/biolink/biolinkml/meta/default_range> .
@prefix defining_slots: <https://w3id.org/biolink/biolinkml/meta/defining_slots> .
@prefix definition_uri: <https://w3id.org/biolink/biolinkml/meta/definition_uri> .
@prefix deprecated_element_has_exact_replacement: <https://w3id.org/biolink/biolinkml/meta/deprecated_element_has_exact_replacement> .
@prefix deprecated_element_has_possible_replacement: <https://w3id.org/biolink/biolinkml/meta/deprecated_element_has_possible_replacement> .
@prefix domain: <https://w3id.org/biolink/biolinkml/meta/domain> .
@prefix exact_mappings: <http://www.w3.org/2004/02/skos/core#exactMatch> .
@prefix examples: <https://w3id.org/biolink/biolinkml/meta/examples> .
@prefix from_schema: <https://w3id.org/biolink/biolinkml/meta/from_schema> .
@prefix generation_date: <https://w3id.org/biolink/biolinkml/meta/generation_date> .
@prefix id: <https://w3id.org/biolink/biolinkml/meta/id> .
@prefix identifier: <https://w3id.org/biolink/biolinkml/meta/identifier> .
@prefix imports: <https://w3id.org/biolink/biolinkml/meta/imports> .
@prefix in_subset: <https://w3id.org/biolink/biolinkml/meta/in_subset> .
@prefix inherited: <https://w3id.org/biolink/biolinkml/meta/inherited> .
@prefix inlined: <https://w3id.org/biolink/biolinkml/meta/inlined> .
@prefix inverse: <https://w3id.org/biolink/biolinkml/meta/inverse> .
@prefix is_a: <https://w3id.org/biolink/biolinkml/meta/is_a> .
@prefix is_class_field: <https://w3id.org/biolink/biolinkml/meta/is_class_field> .
@prefix is_usage_slot: <https://w3id.org/biolink/biolinkml/meta/is_usage_slot> .
@prefix key: <https://w3id.org/biolink/biolinkml/meta/key> .
@prefix local_names: <https://w3id.org/biolink/biolinkml/meta/local_names> .
@prefix mappings: <http://www.w3.org/2004/02/skos/core#mappingRelation> .
@prefix meta: <https://w3id.org/biolink/biolinkml/meta/> .
@prefix metatype: <https://w3id.org/biolink/biolinkml/type/> .
@prefix mixin: <https://w3id.org/biolink/biolinkml/meta/mixin> .
@prefix mixins: <https://w3id.org/biolink/biolinkml/meta/mixins> .
@prefix multivalued: <https://w3id.org/biolink/biolinkml/meta/multivalued> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix owner: <https://w3id.org/biolink/biolinkml/meta/owner> .
@prefix pav: <http://purl.org/pav/> .
@prefix prefix_reference: <https://w3id.org/biolink/biolinkml/meta/prefix_reference> .
@prefix prefixes: <https://w3id.org/biolink/biolinkml/meta/prefixes> .
@prefix range: <https://w3id.org/biolink/biolinkml/meta/range> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix related_mappings: <http://www.w3.org/2004/02/skos/core#relatedMatch> .
@prefix required: <https://w3id.org/biolink/biolinkml/meta/required> .
@prefix see_also: <https://w3id.org/biolink/biolinkml/meta/see_also> .
@prefix shex: <http://www.w3.org/ns/shex#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix slot_uri: <https://w3id.org/biolink/biolinkml/meta/slot_uri> .
@prefix slot_usage: <https://w3id.org/biolink/biolinkml/meta/slot_usage> .
@prefix slots: <https://w3id.org/biolink/biolinkml/meta/slots> .
@prefix source_file_date: <https://w3id.org/biolink/biolinkml/meta/source_file_date> .
@prefix source_file_size: <https://w3id.org/biolink/biolinkml/meta/source_file_size> .
@prefix subclass_of: <https://w3id.org/biolink/biolinkml/meta/subclass_of> .
@prefix subproperty_of: <https://w3id.org/biolink/biolinkml/meta/subproperty_of> .
@prefix subsets: <https://w3id.org/biolink/biolinkml/meta/subsets> .
@prefix symmetric: <https://w3id.org/biolink/biolinkml/meta/symmetric> .
@prefix typeof: <https://w3id.org/biolink/biolinkml/meta/typeof> .
@prefix types: <https://w3id.org/biolink/biolinkml/meta/types> .
@prefix union_of: <https://w3id.org/biolink/biolinkml/meta/union_of> .
@prefix uri: <https://w3id.org/biolink/biolinkml/meta/uri> .
@prefix values_from: <https://w3id.org/biolink/biolinkml/meta/values_from> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

meta:metamodel a meta:SchemaDefinition ;
    classes: meta:AltDescription,
        meta:ClassDefinition,
        meta:Definition,
        meta:Element,
        meta:Example,
        meta:LocalName,
        meta:Prefix,
        meta:SchemaDefinition,
        meta:SlotDefinition,
        meta:SubsetDefinition,
        meta:TypeDefinition ;
    meta:default_curi_maps "semweb_context" ;
    meta:default_prefix "meta" ;
    default_range: meta:string ;
    meta:description "A metamodel for defining biolink related schemas" ;
    meta:emit_prefixes "OIO",
        "dcterms",
        "meta",
        "owl",
        "pav",
        "rdf",
        "rdfs",
        "skos",
        "xsd" ;
    generation_date: "2020-06-07 17:46"^^xsd:dateTime ;
    id: biolinkml:meta ;
    imports: biolinkml:mappings,
        biolinkml:types ;
    meta:license "https://creativecommons.org/publicdomain/zero/1.0/" ;
    meta:metamodel_version "1.4.3" ;
    prefixes: [ meta:prefix_prefix "skos" ;
            prefix_reference: skos: ],
        [ meta:prefix_prefix "meta" ;
            prefix_reference: meta: ],
        [ meta:prefix_prefix "biolinkml" ;
            prefix_reference: biolinkml: ],
        [ meta:prefix_prefix "OIO" ;
            prefix_reference: OIO: ],
        [ meta:prefix_prefix "pav" ;
            prefix_reference: pav: ] ;
    slots: abstract:,
        meta:alias,
        meta:aliases,
        meta:alt_description_source,
        meta:alt_description_text,
        alt_descriptions:,
        apply_to:,
        meta:base,
        meta:class_definition_apply_to,
        meta:class_definition_is_a,
        meta:class_definition_mixins,
        class_uri:,
        classes:,
        meta:close_mappings,
        meta:comments,
        meta:default_curi_maps,
        meta:default_prefix,
        default_range:,
        defining_slots:,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        domain:,
        meta:emit_prefixes,
        meta:exact_mappings,
        examples:,
        from_schema:,
        generation_date:,
        id:,
        id:_prefixes,
        identifier:,
        meta:ifabsent,
        meta:imported_from,
        imports:,
        in_subset:,
        inherited:,
        inlined:,
        inverse:,
        is_a:,
        is_class_field:,
        is_usage_slot:,
        key:,
        meta:license,
        meta:local_name_source,
        meta:local_name_value,
        local_names:,
        meta:mappings,
        meta:metamodel_version,
        mixin:,
        mixins:,
        multivalued:,
        meta:name,
        meta:notes,
        owner:,
        meta:prefix_prefix,
        prefix_reference:,
        prefixes:,
        range:,
        meta:readonly,
        meta:related_mappings,
        meta:repr,
        required:,
        meta:role,
        see_also:,
        meta:singular_name,
        meta:slot_definition_apply_to,
        meta:slot_definition_is_a,
        meta:slot_definition_mixins,
        meta:slot_definitions,
        slot_uri:,
        slot_usage:,
        slots:,
        meta:source_file,
        source_file_date:,
        source_file_size:,
        subclass_of:,
        subproperty_of:,
        subsets:,
        symmetric:,
        meta:title,
        meta:todos,
        meta:type_uri,
        typeof:,
        types:,
        union_of:,
        meta:value,
        meta:value_description,
        values_from:,
        meta:version ;
    meta:source_file "meta.yaml" ;
    source_file_date: "Wed May 27 20:10:12 2020"^^xsd:dateTime ;
    source_file_size: 23490 ;
    subsets: meta:owl ;
    meta:title "Biolink Schema Metamodel" ;
    types: meta:boolean,
        meta:date,
        meta:datetime,
        meta:double,
        meta:float,
        meta:integer,
        meta:ncname,
        meta:nodeidentifier,
        meta:objectidentifier,
        meta:string,
        meta:time,
        uri:,
        uri:orcurie ;
    meta:version "1.4.3" .

meta:date a meta:TypeDefinition ;
    meta:base "XSDDate" ;
    definition_uri: metatype:Date ;
    meta:description "a date (year, month and day) in an idealized calendar" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:notes "URI is dateTime because OWL reasoners don't work with straight date or time" ;
    meta:repr "str" ;
    uri: xsd:date .

meta:double a meta:TypeDefinition ;
    meta:base "float" ;
    definition_uri: metatype:Double ;
    meta:description "A real number that conforms to the xsd:double specification" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    uri: xsd:double .

meta:float a meta:TypeDefinition ;
    meta:base "float" ;
    definition_uri: metatype:Float ;
    meta:description "A real number that conforms to the xsd:float specification" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    uri: xsd:float .

meta:nodeidentifier a meta:TypeDefinition ;
    meta:base "NodeIdentifier" ;
    definition_uri: metatype:Nodeidentifier ;
    meta:description "A URI, CURIE or BNODE that represents a node in a model." ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:repr "str" ;
    uri: shex:nonLiteral .

meta:objectidentifier a meta:TypeDefinition ;
    meta:base "ElementIdentifier" ;
    meta:comments "Used for inheritence and type checking" ;
    definition_uri: metatype:Objectidentifier ;
    meta:description "A URI or CURIE that represents an object in the model." ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:repr "str" ;
    uri: shex:iri .

meta:time a meta:TypeDefinition ;
    meta:base "XSDTime" ;
    definition_uri: metatype:Time ;
    meta:description "A time object represents a (local) time of day, independent of any particular day" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:notes "URI is dateTime because OWL reasoners don't work with straight date or time" ;
    meta:repr "str" ;
    uri: xsd:dateTime .

meta:class_definition_apply_to a meta:SlotDefinition ;
    meta:alias "apply_to" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    is_a: apply_to: ;
    is_usage_slot: true ;
    multivalued: true ;
    owner: meta:ClassDefinition ;
    range: meta:ClassDefinition ;
    slot_uri: apply_to: .

meta:class_definition_is_a a meta:SlotDefinition ;
    meta:alias "is_a" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    is_a: is_a: ;
    is_usage_slot: true ;
    owner: meta:ClassDefinition ;
    range: meta:ClassDefinition ;
    slot_uri: is_a: .

meta:class_definition_mixins a meta:SlotDefinition ;
    meta:alias "mixins" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    is_a: mixins: ;
    is_usage_slot: true ;
    multivalued: true ;
    owner: meta:ClassDefinition ;
    range: meta:ClassDefinition ;
    slot_uri: mixins: .

meta:integer a meta:TypeDefinition ;
    meta:base "int" ;
    definition_uri: metatype:Integer ;
    meta:description "An integer" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    uri: xsd:integer .

meta:slot_definition_apply_to a meta:SlotDefinition ;
    meta:alias "apply_to" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    is_a: apply_to: ;
    is_usage_slot: true ;
    multivalued: true ;
    owner: meta:SlotDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: apply_to: .

meta:slot_definition_is_a a meta:SlotDefinition ;
    meta:alias "is_a" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    is_a: is_a: ;
    is_usage_slot: true ;
    owner: meta:SlotDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: is_a: .

meta:slot_definition_mixins a meta:SlotDefinition ;
    meta:alias "mixins" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    is_a: mixins: ;
    is_usage_slot: true ;
    multivalued: true ;
    owner: meta:SlotDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: mixins: .

meta:alt_description_source a meta:SlotDefinition ;
    meta:alias "source" ;
    definition_uri: meta:alt_description_source ;
    meta:description "the source of an attributed description" ;
    domain: meta:AltDescription ;
    from_schema: biolinkml:meta ;
    key: true ;
    owner: meta:AltDescription ;
    range: meta:ncname ;
    required: true ;
    slot_uri: meta:source .

meta:alt_description_text a meta:SlotDefinition ;
    meta:alias "description" ;
    definition_uri: meta:alt_description_text ;
    meta:description "text of an attributed description" ;
    domain: meta:AltDescription ;
    from_schema: biolinkml:meta ;
    owner: meta:AltDescription ;
    range: meta:string ;
    required: true ;
    slot_uri: meta:description .

meta:datetime a meta:TypeDefinition ;
    meta:base "XSDDateTime" ;
    definition_uri: metatype:Datetime ;
    meta:description "The combination of a date and time" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:repr "str" ;
    uri: xsd:dateTime .

meta:slot_definitions a meta:SlotDefinition ;
    meta:alias "slots" ;
    definition_uri: meta:slot_definitions ;
    meta:description "slot definitions" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: slots: .

meta:type_uri a meta:SlotDefinition ;
    meta:alias "uri" ;
    meta:comments "every root type must have a type uri",
        "uri is typically drawn from the set of URI's defined in OWL (https://www.w3.org/TR/2012/REC-owl2-syntax-20121211/#Datatype_Maps)" ;
    definition_uri: meta:type_uri ;
    meta:description "The uri that defines the possible values for the type definition" ;
    domain: meta:TypeDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:TypeDefinition ;
    range: uri:orcurie ;
    slot_uri: uri: .

meta:value_description a meta:SlotDefinition ;
    meta:alias "description" ;
    definition_uri: meta:value_description ;
    meta:description "description of what the value is doing" ;
    domain: meta:Example ;
    from_schema: biolinkml:meta ;
    owner: meta:Example ;
    range: meta:string ;
    slot_uri: meta:description .

meta:alias a meta:SlotDefinition ;
    definition_uri: meta:alias ;
    meta:description "the name used for a slot in the context of its owning class.  If present, this is used instead of the actual slot name." ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:string ;
    slot_uri: meta:alias .

meta:base a meta:SlotDefinition ;
    meta:comments "every root type must have a base",
        "the base is inherited by child types but may be overriden.  Base compatibility is not checked." ;
    definition_uri: meta:base ;
    meta:description "python base type that implements this type definition" ;
    domain: meta:TypeDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:TypeDefinition ;
    range: meta:string ;
    slot_uri: meta:base .

class_uri: a meta:SlotDefinition ;
    definition_uri: class_uri: ;
    meta:description "URI of the class in an RDF environment" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    meta:ifabsent "class_curie" ;
    owner: meta:ClassDefinition ;
    range: uri:orcurie ;
    slot_uri: class_uri: .

classes: a meta:SlotDefinition ;
    definition_uri: classes: ;
    meta:description "class definitions" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:ClassDefinition ;
    slot_uri: classes: .

meta:default_curi_maps a meta:SlotDefinition ;
    definition_uri: meta:default_curi_maps ;
    meta:description "ordered list of prefixcommon biocontexts to be fetched to resolve id prefixes and inline prefix variables" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    slot_uri: meta:default_curi_maps .

meta:default_prefix a meta:SlotDefinition ;
    definition_uri: meta:default_prefix ;
    meta:description "default and base prefix -- used for ':' identifiers, @base and @vocab" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    meta:ifabsent "default_ns" ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    slot_uri: meta:default_prefix .

default_range: a meta:SlotDefinition ;
    definition_uri: default_range: ;
    meta:description "default slot range to be used if range element is omitted from a slot definition" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    meta:notes "restricted to type definitions for the time being.  Could be broadened if required" ;
    owner: meta:SchemaDefinition ;
    range: meta:TypeDefinition ;
    slot_uri: default_range: .

defining_slots: a meta:SlotDefinition ;
    definition_uri: defining_slots: ;
    meta:description "The combination of is a plus defining slots form a genus-differentia definition, or the set of necessary and sufficient conditions that can be transformed into an OWL equivalence axiom" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    multivalued: true ;
    owner: meta:ClassDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: defining_slots: .

domain: a meta:SlotDefinition ;
    definition_uri: domain: ;
    meta:description """defines the type of the subject of the slot.  Given the following slot definition
  S1:
    domain: C1
    range:  C2
the declaration
  X:
    S1: Y

implicitly asserts that X is an instance of C1
""" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:ClassDefinition ;
    slot_uri: domain: .

meta:emit_prefixes a meta:SlotDefinition ;
    definition_uri: meta:emit_prefixes ;
    meta:description "a list of Curie prefixes that are used in the representation of instances of the model.  All prefixes in this list are added to the prefix sections of the target models." ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:ncname ;
    slot_uri: meta:emit_prefixes .

generation_date: a meta:SlotDefinition ;
    definition_uri: generation_date: ;
    meta:description "date and time that the schema was loaded/generated" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:datetime ;
    meta:readonly "supplied by the schema loader" ;
    slot_uri: generation_date: .

id: a meta:SlotDefinition ;
    definition_uri: id: ;
    meta:description "The official schema URI" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SchemaDefinition ;
    range: uri: ;
    required: true ;
    slot_uri: id: .

identifier: a meta:SlotDefinition ;
    meta:comments "a given domain can have at most one identifier",
        "identifier is inherited",
        "identifier slots are always required" ;
    definition_uri: identifier: ;
    meta:description "true means that this slot is the subject of a set of assertions.  Identifiers do not appear as predicates in the model" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: identifier: .

meta:ifabsent a meta:SlotDefinition ;
    definition_uri: meta:ifabsent ;
    meta:description """function that provides a default value for the slot.  Possible values for this slot are defined in biolink.utils.ifabsent_functions.default_library:
  * [Tt]rue -- boolean True
  * [Ff]alse -- boolean False
  * int(value) -- integer value
  * str(value) -- string value
  * default_range -- schema default range
  * bnode -- blank node identifier
  * slot_uri -- URI for the slot
  * class_curie -- CURIE for the containing class
  * class_uri -- URI for the containing class""" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:string ;
    slot_uri: meta:ifabsent .

imports: a meta:SlotDefinition ;
    definition_uri: imports: ;
    meta:description "other schemas that are included in this schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: uri:orcurie ;
    slot_uri: imports: .

inherited: a meta:SlotDefinition ;
    meta:comments "Inherited applies to slot values.  Parent *slots* are always inherited by subclasses" ;
    definition_uri: inherited: ;
    meta:description "true means that the *value* of a slot is inherited by subclasses" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: inherited: .

inlined: a meta:SlotDefinition ;
    definition_uri: inlined: ;
    meta:description "an inlined definition a list of actual values rather than references.  Only applies to slots whose range is a class." ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: inlined: .

inverse: a meta:SlotDefinition ;
    mappings: owl:inverseOf ;
    definition_uri: inverse: ;
    meta:description "indicates that any instance of d s r implies that there is also an instance of r s' d" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: inverse: .

is_class_field: a meta:SlotDefinition ;
    definition_uri: is_class_field: ;
    meta:description "indicates that any instance, i,  the domain of this slot will include an assert of i s range" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: is_class_field: .

is_usage_slot: a meta:SlotDefinition ;
    definition_uri: is_usage_slot: ;
    meta:description "True means that this slot was defined in a slot_usage situation" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    meta:readonly "filled in by the loader" ;
    slot_uri: is_usage_slot: .

key: a meta:SlotDefinition ;
    definition_uri: key: ;
    meta:description "true means that the slot uniquely identifies the element within the context of its container.  Key slots are NOT identifiers - they do not serve as subjects" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    meta:notes "a given domain can have at most one key",
        "key is inherited",
        "key slots are always required" ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: key: .

meta:license a meta:SlotDefinition ;
    mappings: dcterms:license ;
    definition_uri: meta:license ;
    meta:description "license for the schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    slot_uri: meta:license .

meta:local_name_source a meta:SlotDefinition ;
    definition_uri: meta:local_name_source ;
    meta:description "the ncname of the source of the name" ;
    domain: meta:LocalName ;
    from_schema: biolinkml:meta ;
    key: true ;
    owner: meta:LocalName ;
    range: meta:ncname ;
    required: true ;
    slot_uri: meta:local_name_source .

meta:local_name_value a meta:SlotDefinition ;
    mappings: skos:altLabel ;
    definition_uri: meta:local_name_value ;
    meta:description "a name assigned to an element in a given ontology" ;
    domain: meta:LocalName ;
    from_schema: biolinkml:meta ;
    owner: meta:LocalName ;
    range: meta:string ;
    required: true ;
    slot_uri: meta:local_name_value .

meta:metamodel_version a meta:SlotDefinition ;
    definition_uri: meta:metamodel_version ;
    meta:description "Version of the metamodel used to load the schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    meta:readonly "supplied by the schema loader" ;
    slot_uri: meta:metamodel_version .

multivalued: a meta:SlotDefinition ;
    definition_uri: multivalued: ;
    meta:description "true means that slot can have more than one value" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: multivalued: .

owner: a meta:SlotDefinition ;
    definition_uri: owner: ;
    meta:description "the \"owner\" of the slot. It is the class if it appears in the slots list, otherwise the declaring slot" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:Definition ;
    meta:readonly "filled in by loader -- either class domain or slot domain" ;
    slot_uri: owner: .

meta:prefix_prefix a meta:SlotDefinition ;
    definition_uri: meta:prefix_prefix ;
    meta:description "the nsname (sans ':' for a given prefix)" ;
    domain: meta:Prefix ;
    from_schema: biolinkml:meta ;
    key: true ;
    owner: meta:Prefix ;
    range: meta:ncname ;
    required: true ;
    slot_uri: meta:prefix_prefix .

prefix_reference: a meta:SlotDefinition ;
    definition_uri: prefix_reference: ;
    meta:description "A URI associated with a given prefix" ;
    domain: meta:Prefix ;
    from_schema: biolinkml:meta ;
    owner: meta:Prefix ;
    range: uri: ;
    required: true ;
    slot_uri: prefix_reference: .

prefixes: a meta:SlotDefinition ;
    definition_uri: prefixes: ;
    meta:description "prefix / URI definitions to be added to the context beyond those fetched from prefixcommons in id prefixes" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:Prefix ;
    slot_uri: prefixes: .

range: a meta:SlotDefinition ;
    definition_uri: range: ;
    meta:description """defines the type of the object of the slot.  Given the following slot definition
  S1:
    domain: C1
    range:  C2
the declaration
  X:
    S1: Y

implicitly asserts Y is an instance of C2
""" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    meta:ifabsent "default_range" ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:Element ;
    slot_uri: range: .

meta:readonly a meta:SlotDefinition ;
    definition_uri: meta:readonly ;
    meta:description "If present, slot is read only.  Text explains why" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:string ;
    slot_uri: meta:readonly .

meta:repr a meta:SlotDefinition ;
    definition_uri: meta:repr ;
    meta:description "the name of the python object that implements this type definition" ;
    domain: meta:TypeDefinition ;
    examples: [ a meta:Example ] ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:TypeDefinition ;
    range: meta:string ;
    slot_uri: meta:repr .

required: a meta:SlotDefinition ;
    definition_uri: required: ;
    meta:description "true means that the slot must be present in the loaded definition" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: required: .

meta:role a meta:SlotDefinition ;
    definition_uri: meta:role ;
    meta:description "the role played by the slot range" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    inherited: true ;
    owner: meta:SlotDefinition ;
    range: meta:string ;
    slot_uri: meta:role .

meta:singular_name a meta:SlotDefinition ;
    mappings: skos:altLabel ;
    definition_uri: meta:singular_name ;
    meta:description "a name that is used in the singular form" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:string ;
    slot_uri: meta:singular_name .

slot_uri: a meta:SlotDefinition ;
    definition_uri: slot_uri: ;
    meta:description "predicate of this slot for semantic web application" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    meta:ifabsent "slot_curie" ;
    owner: meta:SlotDefinition ;
    range: uri:orcurie ;
    slot_uri: slot_uri: .

slot_usage: a meta:SlotDefinition ;
    meta:comments "Many slots may be re-used across different classes, but the meaning of the slot may be refined by context. For example, a generic association model may use slots subject/predicate/object with generic semantics and minimal constraints. When this is subclasses, e.g. to disease-phenotype associations then slot usage may specify both local naming (e.g. subject=disease) and local constraints" ;
    definition_uri: slot_usage: ;
    meta:description "the redefinition of a slot in the context of the containing class definition." ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:ClassDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: slot_usage: .

meta:source_file a meta:SlotDefinition ;
    definition_uri: meta:source_file ;
    meta:description "name, uri or description of the source of the schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    meta:readonly "suppplied by the schema loader" ;
    slot_uri: meta:source_file .

source_file_date: a meta:SlotDefinition ;
    definition_uri: source_file_date: ;
    meta:description "modification date of the source of the schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:datetime ;
    meta:readonly "supplied by the loader" ;
    slot_uri: source_file_date: .

source_file_size: a meta:SlotDefinition ;
    definition_uri: source_file_size: ;
    meta:description "size in bytes of the source of the schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:integer ;
    meta:readonly "supplied by the schema loader" ;
    slot_uri: source_file_size: .

subclass_of: a meta:SlotDefinition ;
    mappings: rdfs:subClassOf ;
    definition_uri: subclass_of: ;
    meta:description "rdfs:subClassOf to be emitted in OWL generation" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:ClassDefinition ;
    range: uri:orcurie ;
    slot_uri: subclass_of: .

subproperty_of: a meta:SlotDefinition ;
    mappings: rdfs:subPropertyOf ;
    definition_uri: subproperty_of: ;
    meta:description "Ontology property which this slot is a subproperty of" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: uri:orcurie ;
    slot_uri: subproperty_of: .

subsets: a meta:SlotDefinition ;
    definition_uri: subsets: ;
    meta:description "list of subsets referenced in this model" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:SubsetDefinition ;
    slot_uri: subsets: .

symmetric: a meta:SlotDefinition ;
    definition_uri: symmetric: ;
    meta:description "True means that any instance of  d s r implies that there is also an instance of r s d" ;
    domain: meta:SlotDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SlotDefinition ;
    range: meta:boolean ;
    slot_uri: symmetric: .

meta:title a meta:SlotDefinition ;
    mappings: dcterms:title ;
    definition_uri: meta:title ;
    meta:description "the official title of the schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    slot_uri: meta:title .

typeof: a meta:SlotDefinition ;
    meta:comments "the target type definition of the typeof slot is referred to as the \"parent type\"",
        "the type definition containing the typeof slot is referred to as the \"child type\"",
        "type definitions without a typeof slot are referred to as a \"root type\"" ;
    definition_uri: typeof: ;
    meta:description "Names a parent type" ;
    domain: meta:TypeDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:TypeDefinition ;
    range: meta:TypeDefinition ;
    slot_uri: typeof: .

types: a meta:SlotDefinition ;
    definition_uri: types: ;
    meta:description "data types used in the model" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:SchemaDefinition ;
    range: meta:TypeDefinition ;
    slot_uri: types: .

union_of: a meta:SlotDefinition ;
    definition_uri: union_of: ;
    meta:description "indicates that the domain class consists exactly of the members of the classes in the range" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    meta:notes "this only applies in the OWL generation" ;
    owner: meta:ClassDefinition ;
    range: meta:ClassDefinition ;
    slot_uri: union_of: .

meta:value a meta:SlotDefinition ;
    mappings: skos:example ;
    definition_uri: meta:value ;
    meta:description "example value" ;
    domain: meta:Example ;
    from_schema: biolinkml:meta ;
    owner: meta:Example ;
    range: meta:string ;
    slot_uri: meta:value .

meta:version a meta:SlotDefinition ;
    mappings: pav:version ;
    definition_uri: meta:version ;
    meta:description "particular version of schema" ;
    domain: meta:SchemaDefinition ;
    from_schema: biolinkml:meta ;
    owner: meta:SchemaDefinition ;
    range: meta:string ;
    slot_uri: meta:version .

slots: a meta:SlotDefinition ;
    meta:comments "This defines the set of slots that are allowed to be used for a given class. The final list of slots for a class is the combination of the parent (is a) slots, mixins slots, apply to slots minus the slot usage entries. Formally, " ;
    definition_uri: slots: ;
    meta:description "list of slot names that are applicable to a class" ;
    domain: meta:ClassDefinition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:ClassDefinition ;
    range: meta:SlotDefinition ;
    slot_uri: slots: .

uri: a meta:TypeDefinition ;
    meta:base "URI" ;
    definition_uri: metatype:Uri ;
    meta:description "a complete URI" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:repr "str" ;
    uri: xsd:anyURI .

meta:SubsetDefinition a meta:ClassDefinition ;
    class_uri: meta:SubsetDefinition ;
    definition_uri: meta:SubsetDefinition ;
    meta:description "the name and description of a subset" ;
    from_schema: biolinkml:meta ;
    is_a: meta:Element ;
    slots: meta:aliases,
        alt_descriptions:,
        meta:close_mappings,
        meta:comments,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        meta:exact_mappings,
        examples:,
        from_schema:,
        id:_prefixes,
        meta:imported_from,
        in_subset:,
        local_names:,
        meta:mappings,
        meta:name,
        meta:notes,
        meta:related_mappings,
        see_also:,
        meta:todos .

abstract: a meta:SlotDefinition ;
    definition_uri: abstract: ;
    meta:description "an abstract class is a high level class or slot that is typically used to group common slots together and cannot be directly instantiated." ;
    domain: meta:Definition ;
    from_schema: biolinkml:meta ;
    owner: meta:Definition ;
    range: meta:boolean ;
    slot_uri: abstract: .

mixin: a meta:SlotDefinition ;
    definition_uri: mixin: ;
    meta:description "this slot or class can only be used as a mixin -- equivalent to abstract" ;
    domain: meta:Definition ;
    from_schema: biolinkml:meta ;
    owner: meta:Definition ;
    range: meta:boolean ;
    slot_uri: mixin: .

meta:ncname a meta:TypeDefinition ;
    meta:base "NCName" ;
    definition_uri: metatype:Ncname ;
    meta:description "Prefix part of CURIE" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:repr "str" ;
    uri: xsd:string .

values_from: a meta:SlotDefinition ;
    definition_uri: values_from: ;
    meta:description "the identifier of a \"value set\" -- a set of identifiers that form the possible values for the range of a slot" ;
    domain: meta:Definition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Definition ;
    range: uri:orcurie ;
    slot_uri: values_from: .

meta:AltDescription a meta:ClassDefinition ;
    class_uri: meta:AltDescription ;
    definition_uri: meta:AltDescription ;
    meta:description "an attributed description" ;
    from_schema: biolinkml:meta ;
    slots: meta:alt_description_source,
        meta:alt_description_text .

meta:LocalName a meta:ClassDefinition ;
    class_uri: meta:LocalName ;
    definition_uri: meta:LocalName ;
    meta:description "an attributed label" ;
    from_schema: biolinkml:meta ;
    slots: meta:local_name_source,
        meta:local_name_value .

meta:Prefix a meta:ClassDefinition ;
    class_uri: meta:Prefix ;
    definition_uri: meta:Prefix ;
    meta:description "prefix URI tuple" ;
    from_schema: biolinkml:meta ;
    slots: meta:prefix_prefix,
        prefix_reference: .

apply_to: a meta:SlotDefinition ;
    definition_uri: apply_to: ;
    meta:description "Used to extend class or slot definitions. For example, if we have a core schema where a gene has two slots for identifier and symbol, and we have a specialized schema for my_organism where we wish to add a slot systematic_name, we can avoid subclassing by defining a class gene_my_organism, adding the slot to this class, and then adding an apply_to pointing to the gene class. The new slot will be 'injected into' the gene class." ;
    domain: meta:Definition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Definition ;
    range: meta:Definition ;
    slot_uri: apply_to: .

is_a: a meta:SlotDefinition ;
    abstract: true ;
    definition_uri: is_a: ;
    meta:description "specifies single-inheritance between classes or slots. While multiple inheritance is not allowed, mixins can be provided effectively providing the same thing. The semantics are the same when translated to formalisms that allow MI (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python classes) then is a is used. When translating a framework without polymorphism (e.g. json-schema, solr document schema) then is a and mixins are recursively unfolded" ;
    domain: meta:Definition ;
    from_schema: biolinkml:meta ;
    owner: meta:Definition ;
    range: meta:Definition ;
    slot_uri: is_a: .

mixins: a meta:SlotDefinition ;
    definition_uri: mixins: ;
    meta:description "List of definitions to be mixed in. Targets may be any definition of the same type" ;
    domain: meta:Definition ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Definition ;
    range: meta:Definition ;
    slot_uri: mixins: .

meta:Example a meta:ClassDefinition ;
    class_uri: meta:Example ;
    definition_uri: meta:Example ;
    meta:description "usage example and description" ;
    from_schema: biolinkml:meta ;
    slots: meta:value,
        meta:value_description .

meta:aliases a meta:SlotDefinition ;
    mappings: skos:altLabel ;
    definition_uri: meta:aliases ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:string ;
    slot_uri: meta:aliases .

alt_descriptions: a meta:SlotDefinition ;
    definition_uri: alt_descriptions: ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:AltDescription ;
    slot_uri: alt_descriptions: .

meta:close_mappings a meta:SlotDefinition ;
    mappings: close_mappings: ;
    definition_uri: meta:close_mappings ;
    meta:description "A list of terms from different schemas or terminology systems that have close meaning." ;
    from_schema: biolinkml:mappings ;
    meta:imported_from "biolinkml:mappings" ;
    is_a: meta:mappings ;
    multivalued: true ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: meta:close_mappings .

meta:comments a meta:SlotDefinition ;
    mappings: skos:note ;
    definition_uri: meta:comments ;
    meta:description "notes and comments about an element intended for external consumption" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:string ;
    slot_uri: meta:comments .

definition_uri: a meta:SlotDefinition ;
    meta:comments "Formed by combining the default_prefix with the mangled element" ;
    definition_uri: definition_uri: ;
    meta:description "the \"native\" URI of the element" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    owner: meta:Element ;
    range: uri:orcurie ;
    meta:readonly "filled in by the schema loader" ;
    slot_uri: definition_uri: .

meta:deprecated a meta:SlotDefinition ;
    definition_uri: meta:deprecated ;
    meta:description "Description of why and when this element will no longer be used" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    owner: meta:Element ;
    range: meta:string ;
    slot_uri: meta:deprecated .

deprecated_element_has_exact_replacement: a meta:SlotDefinition ;
    mappings: IAO:0100001 ;
    definition_uri: deprecated_element_has_exact_replacement: ;
    meta:description "When an element is deprecated, it can be automatically replaced by this uri or curie" ;
    from_schema: biolinkml:mappings ;
    meta:imported_from "biolinkml:mappings" ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: deprecated_element_has_exact_replacement: .

deprecated_element_has_possible_replacement: a meta:SlotDefinition ;
    mappings: OIO:consider ;
    definition_uri: deprecated_element_has_possible_replacement: ;
    meta:description "When an element is deprecated, it can be potentially replaced by this uri or curie" ;
    from_schema: biolinkml:mappings ;
    meta:imported_from "biolinkml:mappings" ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: deprecated_element_has_possible_replacement: .

meta:exact_mappings a meta:SlotDefinition ;
    mappings: exact_mappings: ;
    definition_uri: meta:exact_mappings ;
    meta:description "A list of terms from different schemas or terminology systems that have identical meaning." ;
    from_schema: biolinkml:mappings ;
    meta:imported_from "biolinkml:mappings" ;
    is_a: meta:mappings ;
    multivalued: true ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: meta:exact_mappings .

examples: a meta:SlotDefinition ;
    definition_uri: examples: ;
    meta:description "example usages of an element" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    inlined: true ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:Example ;
    slot_uri: examples: .

from_schema: a meta:SlotDefinition ;
    mappings: skos:inScheme ;
    definition_uri: from_schema: ;
    meta:description "id of the schema that defined the element" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    meta:notes "A stronger model would be range schema_definition, but this doesn't address the import model" ;
    owner: meta:Element ;
    range: uri: ;
    meta:readonly "supplied by the schema loader" ;
    slot_uri: from_schema: .

id:_prefixes a meta:SlotDefinition ;
    definition_uri: id:_prefixes ;
    meta:description "the identifier of this class or slot must begin with one of the URIs referenced by this prefix" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:ncname ;
    slot_uri: id:_prefixes .

meta:imported_from a meta:SlotDefinition ;
    definition_uri: meta:imported_from ;
    meta:description "the imports entry that this element was derived from.  Empty means primary source" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    owner: meta:Element ;
    range: meta:string ;
    meta:readonly "supplied by the schema loader" ;
    slot_uri: meta:imported_from .

in_subset: a meta:SlotDefinition ;
    mappings: OIO:inSubset ;
    definition_uri: in_subset: ;
    meta:description "used to indicate membership of a term in a defined subset of biolink terms used for a particular domain or application (e.g. the translator_minimal subset holding the minimal set of predicates used in a translator knowledge graph)" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:SubsetDefinition ;
    slot_uri: in_subset: .

local_names: a meta:SlotDefinition ;
    definition_uri: local_names: ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    inlined: true ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:LocalName ;
    slot_uri: local_names: .

meta:name a meta:SlotDefinition ;
    mappings: rdfs:label ;
    definition_uri: meta:name ;
    meta:description "the unique name of the element within the context of the schema.  Name is combined with the default prefix to form the globally unique subject of the target class." ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    identifier: true ;
    in_subset: meta:owl ;
    key: true ;
    owner: meta:Element ;
    range: meta:string ;
    required: true ;
    slot_uri: meta:name .

meta:notes a meta:SlotDefinition ;
    mappings: skos:editorialNote ;
    definition_uri: meta:notes ;
    meta:description "editorial notes about an element intended for internal consumption" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:string ;
    slot_uri: meta:notes .

meta:related_mappings a meta:SlotDefinition ;
    mappings: related_mappings: ;
    definition_uri: meta:related_mappings ;
    meta:description "A list of terms from different schemas or terminology systems that have related meaning." ;
    from_schema: biolinkml:mappings ;
    meta:imported_from "biolinkml:mappings" ;
    is_a: meta:mappings ;
    multivalued: true ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: meta:related_mappings .

see_also: a meta:SlotDefinition ;
    mappings: rdfs:seeAlso ;
    definition_uri: see_also: ;
    meta:description "a reference" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    multivalued: true ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: see_also: .

meta:todos a meta:SlotDefinition ;
    definition_uri: meta:todos ;
    meta:description "Outstanding issue that needs resolution" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    multivalued: true ;
    owner: meta:Element ;
    range: meta:string ;
    slot_uri: meta:todos .

meta:boolean a meta:TypeDefinition ;
    meta:base "Bool" ;
    definition_uri: metatype:Boolean ;
    meta:description "A binary (true or false) value" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    uri: xsd:boolean .

meta:description a meta:SlotDefinition ;
    mappings: skos:definition ;
    definition_uri: meta:description ;
    meta:description "a description of the element's purpose and use" ;
    domain: meta:Element ;
    from_schema: biolinkml:meta ;
    in_subset: meta:owl ;
    owner: meta:Element ;
    range: meta:string ;
    slot_uri: meta:description .

meta:mappings a meta:SlotDefinition ;
    mappings: mappings: ;
    definition_uri: meta:mappings ;
    meta:description "A list of terms from different schemas or terminology systems that have comparable meaning. These may include terms that are precisely equivalent, broader or narrower in meaning, or otherwise semantically related but not equivalent from a strict ontological perspective." ;
    from_schema: biolinkml:mappings ;
    meta:imported_from "biolinkml:mappings" ;
    multivalued: true ;
    owner: meta:Element ;
    range: uri:orcurie ;
    slot_uri: meta:mappings .

meta:owl a meta:SubsetDefinition ;
    definition_uri: meta:Owl ;
    meta:description "Set of slots that appear in the OWL representation of a model" ;
    from_schema: biolinkml:meta .

uri:orcurie a meta:TypeDefinition ;
    meta:base "URIorCURIE" ;
    definition_uri: metatype:Uriorcurie ;
    meta:description "a URI or a CURIE" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    meta:repr "str" ;
    uri: xsd:anyURI .

meta:Definition a meta:ClassDefinition ;
    abstract: true ;
    class_uri: meta:Definition ;
    definition_uri: meta:Definition ;
    meta:description "base class for definitions" ;
    from_schema: biolinkml:meta ;
    is_a: meta:Element ;
    slots: abstract:,
        meta:aliases,
        alt_descriptions:,
        apply_to:,
        meta:close_mappings,
        meta:comments,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        meta:exact_mappings,
        examples:,
        from_schema:,
        id:_prefixes,
        meta:imported_from,
        in_subset:,
        is_a:,
        local_names:,
        meta:mappings,
        mixin:,
        mixins:,
        meta:name,
        meta:notes,
        meta:related_mappings,
        see_also:,
        meta:todos,
        values_from: .

meta:TypeDefinition a meta:ClassDefinition ;
    class_uri: meta:TypeDefinition ;
    definition_uri: meta:TypeDefinition ;
    meta:description "A data type definition." ;
    from_schema: biolinkml:meta ;
    is_a: meta:Element ;
    slots: meta:aliases,
        alt_descriptions:,
        meta:base,
        meta:close_mappings,
        meta:comments,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        meta:exact_mappings,
        examples:,
        from_schema:,
        id:_prefixes,
        meta:imported_from,
        in_subset:,
        local_names:,
        meta:mappings,
        meta:name,
        meta:notes,
        meta:related_mappings,
        meta:repr,
        see_also:,
        meta:todos,
        meta:type_uri,
        typeof: .

meta:string a meta:TypeDefinition ;
    meta:base "str" ;
    definition_uri: metatype:String ;
    meta:description "A character string" ;
    from_schema: biolinkml:types ;
    meta:imported_from "biolinkml:types" ;
    uri: xsd:string .

meta:ClassDefinition a meta:ClassDefinition ;
    class_uri: meta:ClassDefinition ;
    definition_uri: meta:ClassDefinition ;
    meta:description "the definition of a class or interface" ;
    from_schema: biolinkml:meta ;
    is_a: meta:Definition ;
    slots: abstract:,
        meta:aliases,
        alt_descriptions:,
        meta:class_definition_apply_to,
        meta:class_definition_is_a,
        meta:class_definition_mixins,
        class_uri:,
        meta:close_mappings,
        meta:comments,
        defining_slots:,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        meta:exact_mappings,
        examples:,
        from_schema:,
        id:_prefixes,
        meta:imported_from,
        in_subset:,
        local_names:,
        meta:mappings,
        mixin:,
        meta:name,
        meta:notes,
        meta:related_mappings,
        see_also:,
        slot_usage:,
        slots:,
        subclass_of:,
        meta:todos,
        union_of:,
        values_from: .

meta:SchemaDefinition a meta:ClassDefinition ;
    class_uri: meta:SchemaDefinition ;
    definition_uri: meta:SchemaDefinition ;
    meta:description "a collection of subset, type, slot and class definitions" ;
    from_schema: biolinkml:meta ;
    is_a: meta:Element ;
    slots: meta:aliases,
        alt_descriptions:,
        classes:,
        meta:close_mappings,
        meta:comments,
        meta:default_curi_maps,
        meta:default_prefix,
        default_range:,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        meta:emit_prefixes,
        meta:exact_mappings,
        examples:,
        from_schema:,
        generation_date:,
        id:,
        id:_prefixes,
        meta:imported_from,
        imports:,
        in_subset:,
        meta:license,
        local_names:,
        meta:mappings,
        meta:metamodel_version,
        meta:name,
        meta:notes,
        prefixes:,
        meta:related_mappings,
        see_also:,
        meta:slot_definitions,
        meta:source_file,
        source_file_date:,
        source_file_size:,
        subsets:,
        meta:title,
        meta:todos,
        types:,
        meta:version .

meta:Element a meta:ClassDefinition ;
    abstract: true ;
    class_uri: meta:Element ;
    definition_uri: meta:Element ;
    meta:description "a named element in the model" ;
    from_schema: biolinkml:meta ;
    slots: meta:aliases,
        alt_descriptions:,
        meta:close_mappings,
        meta:comments,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        meta:exact_mappings,
        examples:,
        from_schema:,
        id:_prefixes,
        meta:imported_from,
        in_subset:,
        local_names:,
        meta:mappings,
        meta:name,
        meta:notes,
        meta:related_mappings,
        see_also:,
        meta:todos .

meta:SlotDefinition a meta:ClassDefinition ;
    class_uri: meta:SlotDefinition ;
    definition_uri: meta:SlotDefinition ;
    meta:description "the definition of a property or a slot" ;
    from_schema: biolinkml:meta ;
    is_a: meta:Definition ;
    slots: abstract:,
        meta:alias,
        meta:aliases,
        alt_descriptions:,
        meta:close_mappings,
        meta:comments,
        definition_uri:,
        meta:deprecated,
        deprecated_element_has_exact_replacement:,
        deprecated_element_has_possible_replacement:,
        meta:description,
        domain:,
        meta:exact_mappings,
        examples:,
        from_schema:,
        id:_prefixes,
        identifier:,
        meta:ifabsent,
        meta:imported_from,
        in_subset:,
        inherited:,
        inlined:,
        inverse:,
        is_class_field:,
        is_usage_slot:,
        key:,
        local_names:,
        meta:mappings,
        mixin:,
        multivalued:,
        meta:name,
        meta:notes,
        owner:,
        range:,
        meta:readonly,
        meta:related_mappings,
        required:,
        meta:role,
        see_also:,
        meta:singular_name,
        meta:slot_definition_apply_to,
        meta:slot_definition_is_a,
        meta:slot_definition_mixins,
        slot_uri:,
        subproperty_of:,
        symmetric:,
        meta:todos,
        values_from: .



